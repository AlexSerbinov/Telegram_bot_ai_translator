const languageService = require('../services/languageService');
const openaiService = require('../services/openaiService');
const databaseService = require('../services/databaseService');
const logger = require('../utils/logger');
const path = require('path');
const fs = require('fs-extra');
const { config } = require('../config/config');

class CallbackHandlers {

  /**
   * Handle opening settings
   */
  async handleOpenSettings(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} opened settings via callback`);
      
      const currentSettings = await languageService.formatCurrentSettings(userId);
      const keyboard = await languageService.generateSettingsKeyboard(userId);
      
      const message = `‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞**

${currentSettings}

–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleOpenSettings:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle showing help via callback
   */
  async handleShowHelp(ctx) {
    try {
      const helpMessage = `üìñ **–î–æ–≤—ñ–¥–∫–∞ AI Translator Bot**

üé§ **–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ Speech-to-Text: –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑ –∞—É–¥—ñ–æ
‚Ä¢ –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –º—ñ–∂ –º–æ–≤–∞–º–∏
‚Ä¢ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —è–∫–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–µ—Ä–µ–∫–ª–∞–¥
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É

üîß **–ö–æ–º–∞–Ω–¥–∏:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
/menu - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤
/limits - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
/stats - –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

üåç **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:**
üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Ä¢ üá∫üá∏ English ‚Ä¢ üá¨üá™ ·É•·Éê·É†·Éó·É£·Éö·Éò
üáÆüá© Bahasa Indonesia ‚Ä¢ üá∑üá∫ –†—É—Å—Å–∫–∏–π

üìù **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–æ–≤–∏ –≤ /settings
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É Switch –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤`;

      await ctx.editMessageText(helpMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              }
            ]
          ]
        }
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleShowHelp:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle changing primary language
   */
  async handleChangePrimaryLanguage(ctx) {
    try {
      const keyboard = languageService.generateLanguageKeyboard('primary');
      
      await ctx.editMessageText('1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –º–æ–≤—É:', {
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleChangePrimaryLanguage:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle changing secondary language
   */
  async handleChangeSecondaryLanguage(ctx) {
    try {
      const keyboard = languageService.generateLanguageKeyboard('secondary');
      
      await ctx.editMessageText('2Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥—É –º–æ–≤—É:', {
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleChangeSecondaryLanguage:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle language selection
   */
  async handleLanguageSelection(ctx, type, languageCode) {
    try {
      const userId = ctx.from.id;
      const languageInfo = languageService.getLanguageInfo(languageCode);
      
      if (!languageInfo) {
        await ctx.answerCbQuery('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞');
        return;
      }

      const currentSettings = await languageService.getUserLanguages(userId);
      
      if (type === 'primary') {
        await languageService.setUserLanguages(userId, languageCode, currentSettings.secondaryLanguage);
        await ctx.answerCbQuery(`‚úÖ –ü–µ—Ä—à—É –º–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${languageInfo.name}`);
      } else if (type === 'secondary') {
        await languageService.setUserLanguages(userId, currentSettings.primaryLanguage, languageCode);
        await ctx.answerCbQuery(`‚úÖ –î—Ä—É–≥—É –º–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${languageInfo.name}`);
      }

      // Return to settings
      setTimeout(async () => {
        try {
          const newSettings = await languageService.formatCurrentSettings(userId);
          const keyboard = await languageService.generateSettingsKeyboard(userId);
          
          const message = `‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞**

${newSettings}

–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:`;

          await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        } catch (error) {
          logger.error('Error updating settings after language change:', error);
        }
      }, 1000);

    } catch (error) {
      logger.error('Error in handleLanguageSelection:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle switching languages
   */
  async handleSwitchLanguages(ctx) {
    try {
      const userId = ctx.from.id;
      const newSettings = await languageService.switchUserLanguages(userId);
      
      const settingsText = await languageService.formatCurrentSettings(userId);
      const keyboard = await languageService.generateSettingsKeyboard(userId);
      
      const message = `‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞**

${settingsText}

–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery('üîÑ –ú–æ–≤–∏ –ø–æ–º—ñ–Ω—è–Ω–æ –º—ñ—Å—Ü—è–º–∏!');
    } catch (error) {
      logger.error('Error in handleSwitchLanguages:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle settings done
   */
  async handleSettingsDone(ctx) {
    try {
      const userId = ctx.from.id;
      const settings = await languageService.formatCurrentSettings(userId);
      
      const message = `‚úÖ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!**

${settings}

–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É üé§`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown'
      });
      
      await ctx.answerCbQuery('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
    } catch (error) {
      logger.error('Error in handleSettingsDone:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle switch functionality - swap source and target languages
   */
  async handleSwitchAndSpeak(ctx) {
    try {
      const userId = ctx.from.id;
      
      // Switch languages
      const newSettings = await languageService.switchUserLanguages(userId);
      
      const newPrimaryLang = languageService.getLanguageInfo(newSettings.primaryLanguage);
      const newSecondaryLang = languageService.getLanguageInfo(newSettings.secondaryLanguage);
      
      // Send confirmation message about language switch
      const switchMessage = `üîÑ **–ú–æ–≤–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ!**

ü§ñ **–í–∞—à—ñ –º–æ–≤–∏ —Ç–µ–ø–µ—Ä:**
1Ô∏è‚É£ ${newPrimaryLang.flag} ${newPrimaryLang.name}
2Ô∏è‚É£ ${newSecondaryLang.flag} ${newSecondaryLang.name}

üí° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –º–æ–≤—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É!
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üé§`;

      await ctx.reply(switchMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤',
                callback_data: 'open_settings'
              }
            ],
            [
              {
                text: 'üí¨ –ù–æ–≤–∏–π —á–∞—Ç',
                callback_data: 'new_chat'
              },
              {
                text: 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏',
                callback_data: 'show_limits'
              }
            ]
          ]
        }
      });
      
      await ctx.answerCbQuery(`üîÑ –ú–æ–≤–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ!`);
      
    } catch (error) {
      logger.error('Error in handleSwitchAndSpeak:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ –º–æ–≤');
    }
  }

  /**
   * Handle showing user limits
   */
  async handleShowLimits(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} viewing limits`);

      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω');
        return;
      }

      const userStats = await databaseService.getUserStats(user._id);
      const { tokenLimits } = require('../config/config').config;

      // Calculate remaining limits
      const dailyRemaining = Math.max(0, tokenLimits.freeTierDaily - userStats.tokenUsage.dailyUsed);
      const monthlyRemaining = Math.max(0, tokenLimits.freeTierMonthly - userStats.tokenUsage.monthlyUsed);

      // Calculate percentages
      const dailyPercent = Math.round((userStats.tokenUsage.dailyUsed / tokenLimits.freeTierDaily) * 100);
      const monthlyPercent = Math.round((userStats.tokenUsage.monthlyUsed / tokenLimits.freeTierMonthly) * 100);

      // Progress bars
      const dailyBar = this.generateProgressBar(dailyPercent, 20);
      const monthlyBar = this.generateProgressBar(monthlyPercent, 20);

      const limitsMessage = `üìä **–í–∞—à—ñ –ª—ñ–º—ñ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è**

üë§ **–ü—ñ–¥–ø–∏—Å–∫–∞:** ${userStats.subscription.type === 'premium' ? 'üíé Premium' : 'üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞'}

üìà **–î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç:**
${dailyBar} ${dailyPercent}%
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${userStats.tokenUsage.dailyUsed}
‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${dailyRemaining}
‚Ä¢ –í—Å—å–æ–≥–æ: ${tokenLimits.freeTierDaily}

üìä **–ú—ñ—Å—è—á–Ω–∏–π –ª—ñ–º—ñ—Ç:**
${monthlyBar} ${monthlyPercent}%
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${userStats.tokenUsage.monthlyUsed}
‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${monthlyRemaining}
‚Ä¢ –í—Å—å–æ–≥–æ: ${tokenLimits.freeTierMonthly}

üí° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${userStats.stats.totalTranslations}
‚Ä¢ –í—Å—å–æ–≥–æ —Ç–æ–∫–µ–Ω—ñ–≤: ${userStats.tokenUsage.totalUsed}

${userStats.subscription.type === 'free' ? '\nüíé –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞ –¥–∞—î –Ω–µ–æ–±–º–µ–∂–µ–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏!' : ''}`;

      await ctx.editMessageText(limitsMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üí¨ –ù–æ–≤–∏–π —á–∞—Ç',
                callback_data: 'new_chat'
              },
              {
                text: 'üìö –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤',
                callback_data: 'chat_history'
              }
            ],
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              }
            ]
          ]
        }
      });

      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleShowLimits:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç—ñ–≤');
    }
  }

  /**
   * Generate progress bar for limits display
   */
  generateProgressBar(percentage, length = 20) {
    const filled = Math.round((percentage / 100) * length);
    const empty = length - filled;
    
    let bar = '';
    for (let i = 0; i < filled; i++) {
      bar += '‚ñà';
    }
    for (let i = 0; i < empty; i++) {
      bar += '‚ñë';
    }
    
    return bar;
  }

  /**
   * Handle new chat creation
   */
  async handleNewChat(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} creating new chat`);

      // Get user and current language settings
      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω');
        return;
      }

      const languagePair = {
        from: user.languages.primaryLanguage,
        to: user.languages.secondaryLanguage
      };

      // Create new chat
      const newChat = await databaseService.createChat(user._id, languagePair);

      const primaryLang = languageService.getLanguageInfo(languagePair.from);
      const secondaryLang = languageService.getLanguageInfo(languagePair.to);

      await ctx.editMessageText(`üí¨ **–ù–æ–≤–∏–π —á–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!**

üìù **ID —á–∞—Ç—É:** ${newChat._id.toString().slice(-6)}
ü§ñ **–í–∞—à—ñ –º–æ–≤–∏:**
1Ô∏è‚É£ ${primaryLang.flag} ${primaryLang.name}
2Ô∏è‚É£ ${secondaryLang.flag} ${secondaryLang.name}

üí° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –º–æ–≤—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É!
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üé§`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤–∏',
                callback_data: 'open_settings'
              }
            ],
            [
              {
                text: 'üìö –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤',
                callback_data: 'chat_history'
              }
            ]
          ]
        }
      });

      await ctx.answerCbQuery('‚úÖ –ù–æ–≤–∏–π —á–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!');
    } catch (error) {
      logger.error('Error in handleNewChat:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —á–∞—Ç—É');
    }
  }

  /**
   * Handle chat history display
   */
  async handleChatHistory(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} viewing chat history`);

      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω');
        return;
      }

      const chats = await databaseService.getUserChats(user._id, 10);

      if (chats.length === 0) {
        await ctx.editMessageText('üìö **–Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤**\n\n–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ —á–∞—Ç—É.\n–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏!', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üí¨ –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —á–∞—Ç',
                  callback_data: 'new_chat'
                }
              ]
            ]
          }
        });
        await ctx.answerCbQuery();
        return;
      }

      let message = 'üìö **–Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤**\n\n';
      const keyboard = [];

      chats.forEach((chat, index) => {
        const fromLang = languageService.getLanguageInfo(chat.languagePair.from);
        const toLang = languageService.getLanguageInfo(chat.languagePair.to);
        const lastActivity = new Date(chat.stats.lastActivity).toLocaleDateString('uk-UA');
        
        message += `${index + 1}. **${chat.title}**\n`;
        message += `   ${fromLang.flag} ‚Üí ${toLang.flag} | üí¨ ${chat.stats.totalTranslations} | üìÖ ${lastActivity}\n\n`;

        keyboard.push([
          {
            text: `üìñ ${chat.title.substring(0, 30)}${chat.title.length > 30 ? '...' : ''}`,
            callback_data: `view_chat_${chat._id}`
          }
        ]);
      });

      keyboard.push([
        {
          text: 'üí¨ –ù–æ–≤–∏–π —á–∞—Ç',
          callback_data: 'new_chat'
        }
      ]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleChatHistory:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó');
    }
  }

  /**
   * Handle viewing specific chat
   */
  async handleViewChat(ctx, chatId) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} viewing chat ${chatId}`);

      const chat = await databaseService.getChatWithTranslations(chatId, 5);
      if (!chat) {
        await ctx.answerCbQuery('‚ùå –ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // Set as active chat
      const user = await databaseService.getUserByTelegramId(userId);
      await databaseService.setUserActiveChat(user._id, chatId);

      const fromLang = languageService.getLanguageInfo(chat.languagePair.from);
      const toLang = languageService.getLanguageInfo(chat.languagePair.to);

      let message = `üí¨ **${chat.title}**\n\n`;
      message += `üé§ ${fromLang.flag} ${fromLang.name} ‚Üí üåç ${toLang.flag} ${toLang.name}\n`;
      message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** ${chat.stats.totalTranslations} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤\n`;
      message += `üìÖ **–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:** ${new Date(chat.stats.lastActivity).toLocaleDateString('uk-UA')}\n\n`;

      if (chat.translations.length > 0) {
        message += '**–û—Å—Ç–∞–Ω–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏:**\n\n';
        chat.translations.slice(-3).forEach((translation, index) => {
          message += `${index + 1}. *${translation.original.text.substring(0, 50)}${translation.original.text.length > 50 ? '...' : ''}*\n`;
          message += `   ‚û°Ô∏è ${translation.translated.text.substring(0, 50)}${translation.translated.text.length > 50 ? '...' : ''}\n\n`;
        });
      }

      message += '**–ß–∞—Ç –∞–∫—Ç–∏–≤–Ω–∏–π!** –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è üé§';

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üí¨ –ù–æ–≤–∏–π —á–∞—Ç',
                callback_data: 'new_chat'
              },
              {
                text: 'üìö –ù–∞–∑–∞–¥ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó',
                callback_data: 'chat_history'
              }
            ],
            [
              {
                text: 'üóÑÔ∏è –ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏ —á–∞—Ç',
                callback_data: `archive_chat_${chatId}`
              }
            ]
          ]
        }
      });

      await ctx.answerCbQuery('‚úÖ –ß–∞—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
    } catch (error) {
      logger.error('Error in handleViewChat:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —á–∞—Ç—É');
    }
  }

  /**
   * Handle chat archiving
   */
  async handleArchiveChat(ctx, chatId) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} archiving chat ${chatId}`);

      await databaseService.archiveChat(chatId);

      await ctx.editMessageText('üóÑÔ∏è **–ß–∞—Ç –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ**\n\n–ß–∞—Ç –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤. –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —á–∞—Ç –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üí¨ –ù–æ–≤–∏–π —á–∞—Ç',
                callback_data: 'new_chat'
              },
              {
                text: 'üìö –Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤',
                callback_data: 'chat_history'
              }
            ]
          ]
        }
      });

      await ctx.answerCbQuery('üóÑÔ∏è –ß–∞—Ç –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ');
    } catch (error) {
      logger.error('Error in handleArchiveChat:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—ñ');
    }
  }

  /**
   * Main callback query router
   */
  async handleCallback(ctx) {
    const data = ctx.callbackQuery.data;
    
    logger.info(`Callback received: ${data} from user ${ctx.from.id}`);

    try {
      if (data === 'open_settings') {
        await this.handleOpenSettings(ctx);
      } else if (data === 'show_help') {
        await this.handleShowHelp(ctx);
      } else if (data === 'new_chat') {
        await this.handleNewChat(ctx);
      } else if (data === 'chat_history') {
        await this.handleChatHistory(ctx);
      } else if (data === 'show_limits') {
        await this.handleShowLimits(ctx);
      } else if (data === 'change_primary_language') {
        await this.handleChangePrimaryLanguage(ctx);
      } else if (data === 'change_secondary_language') {
        await this.handleChangeSecondaryLanguage(ctx);
      } else if (data === 'switch_languages') {
        await this.handleSwitchLanguages(ctx);
      } else if (data === 'settings_done') {
        await this.handleSettingsDone(ctx);
      } else if (data === 'switch_and_speak') {
        await this.handleSwitchAndSpeak(ctx);
      } else if (data.startsWith('lang_')) {
        const [, type, languageCode] = data.split('_');
        await this.handleLanguageSelection(ctx, type, languageCode);
      } else if (data.startsWith('view_chat_')) {
        const chatId = data.replace('view_chat_', '');
        await this.handleViewChat(ctx, chatId);
      } else if (data.startsWith('archive_chat_')) {
        const chatId = data.replace('archive_chat_', '');
        await this.handleArchiveChat(ctx, chatId);
      } else {
        await ctx.answerCbQuery('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      logger.error('Error in callback handler:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }
}

module.exports = new CallbackHandlers(); 