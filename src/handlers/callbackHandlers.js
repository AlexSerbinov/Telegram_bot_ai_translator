const languageService = require('../services/languageService');
const openaiService = require('../services/openaiService');
const databaseService = require('../services/databaseService');
const logger = require('../utils/logger');
const path = require('path');
const fs = require('fs-extra');
const { config } = require('../config/config');

class CallbackHandlers {

  /**
   * Handle opening settings
   */
  async handleOpenSettings(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} opened settings via callback`);
      
      const currentSettings = await languageService.formatCurrentSettings(userId);
      const keyboard = await languageService.generateSettingsKeyboard(userId);
      
      const message = `‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞**

${currentSettings}

–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleOpenSettings:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle showing help via callback
   */
  async handleShowHelp(ctx) {
    try {
      const helpMessage = `üìñ **–î–æ–≤—ñ–¥–∫–∞ AI Translator Bot**

üé§ **–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ Speech-to-Text: –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑ –∞—É–¥—ñ–æ
‚Ä¢ –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –º—ñ–∂ –º–æ–≤–∞–º–∏
‚Ä¢ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —è–∫–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–µ—Ä–µ–∫–ª–∞–¥
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É

üîß **–ö–æ–º–∞–Ω–¥–∏:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
/menu - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤
/limits - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
/stats - –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

üåç **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:**
üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ ‚Ä¢ üá∫üá∏ English ‚Ä¢ üá¨üá™ ·É•·Éê·É†·Éó·É£·Éö·Éò
üáÆüá© Bahasa Indonesia ‚Ä¢ üá∑üá∫ –†—É—Å—Å–∫–∏–π

üìù **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –º–æ–≤–∏ –≤ /settings
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
3. –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É Switch –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤`;

      await ctx.editMessageText(helpMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              }
            ]
          ]
        }
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleShowHelp:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle changing primary language
   */
  async handleChangePrimaryLanguage(ctx) {
    try {
      const keyboard = languageService.generateLanguageKeyboard('primary');
      
      await ctx.editMessageText('1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à—É –º–æ–≤—É:', {
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleChangePrimaryLanguage:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle changing secondary language
   */
  async handleChangeSecondaryLanguage(ctx) {
    try {
      const keyboard = languageService.generateLanguageKeyboard('secondary');
      
      await ctx.editMessageText('2Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –¥—Ä—É–≥—É –º–æ–≤—É:', {
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleChangeSecondaryLanguage:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle language selection
   */
  async handleLanguageSelection(ctx, type, languageCode) {
    try {
      const userId = ctx.from.id;
      const languageInfo = languageService.getLanguageInfo(languageCode);
      
      if (!languageInfo) {
        await ctx.answerCbQuery('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞');
        return;
      }

      const currentSettings = await languageService.getUserLanguages(userId);
      
      if (type === 'primary') {
        await languageService.setUserLanguages(userId, languageCode, currentSettings.secondaryLanguage);
        await ctx.answerCbQuery(`‚úÖ –ü–µ—Ä—à—É –º–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${languageInfo.name}`);
      } else if (type === 'secondary') {
        await languageService.setUserLanguages(userId, currentSettings.primaryLanguage, languageCode);
        await ctx.answerCbQuery(`‚úÖ –î—Ä—É–≥—É –º–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${languageInfo.name}`);
      }

      // Return to settings
      setTimeout(async () => {
        try {
          const newSettings = await languageService.formatCurrentSettings(userId);
          const keyboard = await languageService.generateSettingsKeyboard(userId);
          
          const message = `‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞**

${newSettings}

–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:`;

          await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        } catch (error) {
          logger.error('Error updating settings after language change:', error);
        }
      }, 1000);

    } catch (error) {
      logger.error('Error in handleLanguageSelection:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle switching languages
   */
  async handleSwitchLanguages(ctx) {
    try {
      const userId = ctx.from.id;
      const newSettings = await languageService.switchUserLanguages(userId);
      
      const settingsText = await languageService.formatCurrentSettings(userId);
      const keyboard = await languageService.generateSettingsKeyboard(userId);
      
      const message = `‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞**

${settingsText}

–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
      
      await ctx.answerCbQuery('üîÑ –ú–æ–≤–∏ –ø–æ–º—ñ–Ω—è–Ω–æ –º—ñ—Å—Ü—è–º–∏!');
    } catch (error) {
      logger.error('Error in handleSwitchLanguages:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle settings done (close settings)
   */
  async handleSettingsDone(ctx) {
    try {
      const settingsText = await languageService.formatCurrentSettings(ctx.from.id);
      
      const message = `‚úÖ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!**

${settingsText}

–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É üé§`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏',
                callback_data: 'show_limits'
              },
              {
                text: 'üìñ –î–æ–≤—ñ–¥–∫–∞',
                callback_data: 'show_help'
              }
            ]
          ]
        }
      });
      
      await ctx.answerCbQuery('‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!');
    } catch (error) {
      logger.error('Error in handleSettingsDone:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle switch and speak functionality
   */
  async handleSwitchAndSpeak(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} requested switch and speak`);
      
      // Switch languages
      const newSettings = await languageService.switchUserLanguages(userId);
      
      const primaryLang = languageService.getLanguageInfo(newSettings.primaryLanguage);
      const secondaryLang = languageService.getLanguageInfo(newSettings.secondaryLanguage);
      
      const message = `üîÑ **–ú–æ–≤–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ!**

ü§ñ **–¢–µ–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω—ñ –º–æ–≤–∏:**
1Ô∏è‚É£ ${primaryLang.flag} ${primaryLang.name}
2Ô∏è‚É£ ${secondaryLang.flag} ${secondaryLang.name}

üí° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î —è–∫–æ—é –º–æ–≤–æ—é –≤–∏ –≥–æ–≤–æ—Ä–∏—Ç–µ —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É!
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üé§`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: `üîÑ ${primaryLang.flag} ‚áÑ ${secondaryLang.flag} –ü–æ–º—ñ–Ω—è—Ç–∏ –º–æ–≤–∏`,
                callback_data: 'switch_languages'
              }
            ],
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              },
              {
                text: 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏',
                callback_data: 'show_limits'
              }
            ]
          ]
        }
      });
      
      await ctx.answerCbQuery(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${primaryLang.flag} ‚áÑ ${secondaryLang.flag}`);
    } catch (error) {
      logger.error('Error in handleSwitchAndSpeak:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—ñ');
    }
  }

  /**
   * Handle showing user limits
   */
  async handleShowLimits(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} requested limits via callback`);

      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω');
        return;
      }

      const userStats = await databaseService.getUserStats(user._id);
      const { tokenLimits } = require('../config/config').config;

      // Get current limits based on subscription
      const limits = user.getCurrentLimits();

      // Calculate remaining limits
      const dailyRemaining = Math.max(0, limits.dailyLimit - userStats.tokenUsage.dailyUsed);
      const monthlyRemaining = Math.max(0, limits.monthlyLimit - userStats.tokenUsage.monthlyUsed);

      // Calculate percentages
      const dailyPercent = Math.round((userStats.tokenUsage.dailyUsed / limits.dailyLimit) * 100);
      const monthlyPercent = Math.round((userStats.tokenUsage.monthlyUsed / limits.monthlyLimit) * 100);

      // Progress bars
      const dailyBar = this.generateProgressBar(dailyPercent, 20);
      const monthlyBar = this.generateProgressBar(monthlyPercent, 20);

      const limitsMessage = `üìä **–í–∞—à—ñ –ª—ñ–º—ñ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è**

üë§ **–ü—ñ–¥–ø–∏—Å–∫–∞:** ${userStats.subscription.type === 'premium' ? 'üíé Premium' : 'üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞'}

üìà **–î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç:**
${dailyBar} ${dailyPercent}%
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${userStats.tokenUsage.dailyUsed}
‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${dailyRemaining}
‚Ä¢ –í—Å—å–æ–≥–æ: ${limits.dailyLimit}

üìä **–ú—ñ—Å—è—á–Ω–∏–π –ª—ñ–º—ñ—Ç:**
${monthlyBar} ${monthlyPercent}%
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${userStats.tokenUsage.monthlyUsed}
‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${monthlyRemaining}
‚Ä¢ –í—Å—å–æ–≥–æ: ${limits.monthlyLimit}

üí° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${userStats.stats.totalTranslations}
‚Ä¢ –í—Å—å–æ–≥–æ —Ç–æ–∫–µ–Ω—ñ–≤: ${userStats.tokenUsage.totalUsed}

${userStats.subscription.type === 'free' ? '\nüíé –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞ –¥–∞—î x10 –±—ñ–ª—å—à–µ –ª—ñ–º—ñ—Ç—ñ–≤!' : ''}`;

      // Generate keyboard based on subscription
      let keyboard = [];
      if (userStats.subscription.type === 'premium') {
        keyboard = [
          [
            {
              text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
              callback_data: 'open_settings'
            },
            {
              text: 'üìñ –î–æ–≤—ñ–¥–∫–∞',
              callback_data: 'show_help'
            }
          ]
        ];
      } else {
        keyboard = [
          [
            {
              text: 'üíé –ü—Ä–µ–º—ñ—É–º',
              callback_data: 'upgrade_premium'
            },
            {
              text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
              callback_data: 'open_settings'
            }
          ]
        ];
      }

      await ctx.editMessageText(limitsMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

      await ctx.answerCbQuery();
    } catch (error) {
      logger.error('Error in handleShowLimits:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç—ñ–≤');
    }
  }

  /**
   * Handle upgrade to premium request
   */
  async handleUpgradePremium(ctx) {
    try {
      const premiumMessage = `üíé **–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞ AI Translator Bot**

üöÄ **–ü–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–µ–º—ñ—É–º:**
‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏** (GPT + Whisper)
‚úÖ **–ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥** –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —è–∫–æ—Å—Ç—ñ
‚úÖ **x10 –±—ñ–ª—å—à–µ –ª—ñ–º—ñ—Ç—ñ–≤** —Ç–æ–∫–µ–Ω—ñ–≤ (100,000/–¥–µ–Ω—å)
‚úÖ **–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å** —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
‚úÖ **–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞**

üí∞ **–¢–∞—Ä–∏—Ñ–∏:**
‚Ä¢ –ú—ñ—Å—è—Ü—å: $9.99
‚Ä¢ –†—ñ–∫: $99.99 (–µ–∫–æ–Ω–æ–º—ñ—è 17%)

üìû **–î–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.**`;

      await ctx.editMessageText(premiumMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏',
                callback_data: 'show_limits'
              },
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              }
            ]
          ]
        }
      });

      await ctx.answerCbQuery('üíé –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–µ–º—ñ—É–º');
    } catch (error) {
      logger.error('Error in handleUpgradePremium:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle free user translation after language selection
   */
  async handleFreeUserTranslation(ctx, callbackData) {
    try {
      const [, audioId, fromLang, toLang] = callbackData.split('_');
      
      // Get pending audio data
      if (!global.pendingAudio || !global.pendingAudio[audioId]) {
        await ctx.editMessageText('‚ùå –°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É.');
        await ctx.answerCbQuery('‚ùå –°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        return;
      }

      const pendingData = global.pendingAudio[audioId];
      
      // Verify user
      if (pendingData.userId !== ctx.from.id) {
        await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É');
        return;
      }

      await ctx.answerCbQuery('‚è≥ –û–±—Ä–æ–±–ª—è—é –ø–µ—Ä–µ–∫–ª–∞–¥...');

      // Update processing message
      await ctx.editMessageText('üÜì –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...\nüé§ –†–æ–∑–ø—ñ–∑–Ω–∞—é –º–æ–≤—É (Whisper)...');

      try {
        const user = await databaseService.getUserByTelegramId(ctx.from.id);
        
        // Process translation manually with specified languages
        const result = await openaiService.completeTranslationManual(
          pendingData.audioPath,
          fromLang,
          toLang
        );

        // Update processing message
        await ctx.editMessageText('üÜì –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...\nüíæ –ó–±–µ—Ä—ñ–≥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');

        // Update user stats and token usage
        await databaseService.incrementUserTranslations(user._id);
        await databaseService.addUserTokenUsage(user._id, result.tokensUsed || 150);

        // Clean up pending audio
        await this.cleanupPendingAudio(audioId);

        // Send translation result via audioHandler
        const audioHandler = require('./audioHandler');
        await audioHandler.sendTranslationResult(ctx, result, user);

        // Delete processing message
        await ctx.telegram.deleteMessage(ctx.chat.id, pendingData.processingMsgId);

      } catch (error) {
        logger.error('Error processing free user translation:', error);
        await ctx.editMessageText('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É.');
        await this.cleanupPendingAudio(audioId);
      }

    } catch (error) {
      logger.error('Error in handleFreeUserTranslation:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Handle canceling translation for free users
   */
  async handleCancelTranslation(ctx, callbackData) {
    try {
      const audioId = callbackData.replace('cancel_', '');
      
      // Get pending audio data
      if (global.pendingAudio && global.pendingAudio[audioId]) {
        const pendingData = global.pendingAudio[audioId];
        
        // Verify user
        if (pendingData.userId === ctx.from.id) {
          await this.cleanupPendingAudio(audioId);
          await ctx.editMessageText('‚ùå **–ü–µ—Ä–µ–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ**\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É üé§');
          await ctx.answerCbQuery('‚ùå –ü–µ—Ä–µ–∫–ª–∞–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
        } else {
          await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É');
        }
      } else {
        await ctx.editMessageText('‚ùå –°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É.');
        await ctx.answerCbQuery('‚ùå –°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      }
    } catch (error) {
      logger.error('Error in handleCancelTranslation:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }

  /**
   * Clean up pending audio data
   */
  async cleanupPendingAudio(audioId) {
    try {
      if (global.pendingAudio && global.pendingAudio[audioId]) {
        const audioHandler = require('./audioHandler');
        await audioHandler.cleanupAudioFile(global.pendingAudio[audioId].audioPath);
        delete global.pendingAudio[audioId];
        logger.info(`Cleaned up pending audio: ${audioId}`);
      }
    } catch (error) {
      logger.error('Error cleaning up pending audio:', error);
    }
  }

  /**
   * Generate progress bar for limits display
   */
  generateProgressBar(percentage, length = 20) {
    const filled = Math.round((percentage / 100) * length);
    const empty = length - filled;
    
    let bar = '';
    for (let i = 0; i < filled; i++) {
      bar += '‚ñà';
    }
    for (let i = 0; i < empty; i++) {
      bar += '‚ñë';
    }
    
    return bar;
  }

  /**
   * Main callback query router
   */
  async handleCallback(ctx) {
    const data = ctx.callbackQuery.data;
    
    logger.info(`Callback received: ${data} from user ${ctx.from.id}`);

    try {
      if (data === 'open_settings') {
        await this.handleOpenSettings(ctx);
      } else if (data === 'show_help') {
        await this.handleShowHelp(ctx);
      } else if (data === 'show_limits') {
        await this.handleShowLimits(ctx);
      } else if (data === 'upgrade_premium') {
        await this.handleUpgradePremium(ctx);
      } else if (data === 'change_primary_language') {
        await this.handleChangePrimaryLanguage(ctx);
      } else if (data === 'change_secondary_language') {
        await this.handleChangeSecondaryLanguage(ctx);
      } else if (data === 'switch_languages') {
        await this.handleSwitchLanguages(ctx);
      } else if (data === 'settings_done') {
        await this.handleSettingsDone(ctx);
      } else if (data === 'switch_and_speak') {
        await this.handleSwitchAndSpeak(ctx);
      } else if (data.startsWith('lang_')) {
        const [, type, languageCode] = data.split('_');
        await this.handleLanguageSelection(ctx, type, languageCode);
      } else if (data.startsWith('translate_')) {
        await this.handleFreeUserTranslation(ctx, data);
      } else if (data.startsWith('cancel_')) {
        await this.handleCancelTranslation(ctx, data);
      } else {
        await ctx.answerCbQuery('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      logger.error('Error in callback handler:', error);
      await ctx.answerCbQuery('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞');
    }
  }
}

module.exports = new CallbackHandlers(); 