const languageService = require('../services/languageService');
const databaseService = require('../services/databaseService');
const logger = require('../utils/logger');

class CommandHandlers {
  
  /**
   * Handle /start command
   */
  async handleStart(ctx) {
    try {
      const userId = ctx.from.id;
      const userName = ctx.from.first_name || 'Friend';
      
      logger.info(`User ${userId} started the bot`);
      
      const welcomeMessage = `ü§ñ –ü—Ä–∏–≤—ñ—Ç, ${userName}! 

–Ø AI Translator Bot - —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.

ü§ñ **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:**
1. –û–±–µ—Ä—ñ—Ç—å –¥–≤—ñ –º–æ–≤–∏ —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—é –∑ —Ü–∏—Ö –º–æ–≤
3. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –º–æ–≤—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–µ –Ω–∞ —ñ–Ω—à—É
4. –û—Ç—Ä–∏–º–∞—î—Ç–µ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é —è–∫–æ—Å—Ç—ñ

‚öôÔ∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –¥–≤—ñ –º–æ–≤–∏ –∫–æ–º–∞–Ω–¥–æ—é /settings`;

      await ctx.reply(welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–æ–≤–∏',
                callback_data: 'open_settings'
              }
            ],
            [
              {
                text: 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏',
                callback_data: 'show_limits'
              }
            ]
          ]
        }
      });
    } catch (error) {
      logger.error('Error in handleStart:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  /**
   * Handle /settings command
   */
  async handleSettings(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} opened settings`);
      
      const currentSettings = await languageService.formatCurrentSettings(userId);
      const keyboard = await languageService.generateSettingsKeyboard(userId);
      
      const message = `‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞**

${currentSettings}

–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:`;

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      logger.error('Error in handleSettings:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.');
    }
  }

  /**
   * Handle /menu command
   */
  async handleMenu(ctx) {
    try {
      logger.info(`User ${ctx.from.id} opened main menu`);
      
      const menuMessage = `ü§ñ **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é AI Translator Bot**

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

      await ctx.reply(menuMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤',
                callback_data: 'open_settings'
              }
            ],
            [
              {
                text: 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏',
                callback_data: 'show_limits'
              },
              {
                text: 'üìñ –î–æ–≤—ñ–¥–∫–∞',
                callback_data: 'show_help'
              }
            ]
          ]
        }
      });
    } catch (error) {
      logger.error('Error in handleMenu:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –º–µ–Ω—é.');
    }
  }

  /**
   * Handle /stats command
   */
  async handleStats(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} requested stats`);

      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      const userStats = await databaseService.getUserStats(user._id);
      const { tokenLimits } = require('../config/config').config;

      // Calculate remaining limits
      const dailyRemaining = Math.max(0, tokenLimits.freeTierDaily - userStats.tokenUsage.dailyUsed);
      const monthlyRemaining = Math.max(0, tokenLimits.freeTierMonthly - userStats.tokenUsage.monthlyUsed);

      // Calculate percentages
      const dailyPercent = Math.round((userStats.tokenUsage.dailyUsed / tokenLimits.freeTierDaily) * 100);
      const monthlyPercent = Math.round((userStats.tokenUsage.monthlyUsed / tokenLimits.freeTierMonthly) * 100);

      const statsMessage = `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ü—ñ–¥–ø–∏—Å–∫–∞:** ${userStats.subscription.type === 'premium' ? 'üíé Premium' : 'üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞'}

üìà **–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤:**
‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ: ${userStats.tokenUsage.dailyUsed} / ${tokenLimits.freeTierDaily} (${dailyPercent}%)
‚Ä¢ –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${userStats.tokenUsage.monthlyUsed} / ${tokenLimits.freeTierMonthly} (${monthlyPercent}%)
‚Ä¢ –í—Å—å–æ–≥–æ: ${userStats.tokenUsage.totalUsed}

‚è≥ **–ó–∞–ª–∏—à–∏–ª–æ—Å—å:**
‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ: ${dailyRemaining} —Ç–æ–∫–µ–Ω—ñ–≤
‚Ä¢ –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthlyRemaining} —Ç–æ–∫–µ–Ω—ñ–≤

üìä **–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**
‚Ä¢ –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${userStats.stats.totalTranslations}
‚Ä¢ –í—Å—å–æ–≥–æ —á–∞—Ç—ñ–≤: ${userStats.stats.totalChats}

${userStats.subscription.type === 'free' ? '\nüíé –†–æ–∑–≥–ª—è–¥–∞–π—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤!' : ''}`;

      await ctx.reply(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏',
                callback_data: 'show_limits'
              },
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              }
            ]
          ]
        }
      });
    } catch (error) {
      logger.error('Error in handleStats:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  /**
   * Handle /limits command
   */
  async handleLimits(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`User ${userId} requested limits via command`);

      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω. –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return;
      }

      const userStats = await databaseService.getUserStats(user._id);
      const { tokenLimits } = require('../config/config').config;

      // Calculate remaining limits
      const dailyRemaining = Math.max(0, tokenLimits.freeTierDaily - userStats.tokenUsage.dailyUsed);
      const monthlyRemaining = Math.max(0, tokenLimits.freeTierMonthly - userStats.tokenUsage.monthlyUsed);

      // Calculate percentages
      const dailyPercent = Math.round((userStats.tokenUsage.dailyUsed / tokenLimits.freeTierDaily) * 100);
      const monthlyPercent = Math.round((userStats.tokenUsage.monthlyUsed / tokenLimits.freeTierMonthly) * 100);

      // Progress bars
      const dailyBar = this.generateProgressBar(dailyPercent, 20);
      const monthlyBar = this.generateProgressBar(monthlyPercent, 20);

      const limitsMessage = `üìä **–í–∞—à—ñ –ª—ñ–º—ñ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è**

üë§ **–ü—ñ–¥–ø–∏—Å–∫–∞:** ${userStats.subscription.type === 'premium' ? 'üíé Premium' : 'üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞'}

üìà **–î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç:**
${dailyBar} ${dailyPercent}%
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${userStats.tokenUsage.dailyUsed}
‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${dailyRemaining}
‚Ä¢ –í—Å—å–æ–≥–æ: ${tokenLimits.freeTierDaily}

üìä **–ú—ñ—Å—è—á–Ω–∏–π –ª—ñ–º—ñ—Ç:**
${monthlyBar} ${monthlyPercent}%
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${userStats.tokenUsage.monthlyUsed}
‚Ä¢ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${monthlyRemaining}
‚Ä¢ –í—Å—å–æ–≥–æ: ${tokenLimits.freeTierMonthly}

üí° **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤: ${userStats.stats.totalTranslations}
‚Ä¢ –í—Å—å–æ–≥–æ —Ç–æ–∫–µ–Ω—ñ–≤: ${userStats.tokenUsage.totalUsed}

${userStats.subscription.type === 'free' ? '\nüíé –ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞ –¥–∞—î –Ω–µ–æ–±–º–µ–∂–µ–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏!' : ''}`;

      await ctx.reply(limitsMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              },
              {
                text: 'üìñ –î–æ–≤—ñ–¥–∫–∞',
                callback_data: 'show_help'
              }
            ]
          ]
        }
      });
    } catch (error) {
      logger.error('Error in handleLimits:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ª—ñ–º—ñ—Ç—ñ–≤.');
    }
  }

  /**
   * Generate progress bar for limits display
   */
  generateProgressBar(percentage, length = 20) {
    const filled = Math.round((percentage / 100) * length);
    const empty = length - filled;
    
    let bar = '';
    for (let i = 0; i < filled; i++) {
      bar += '‚ñà';
    }
    for (let i = 0; i < empty; i++) {
      bar += '‚ñë';
    }
    
    return bar;
  }

  /**
   * Handle /help command
   */
  async handleHelp(ctx) {
    try {
      logger.info(`User ${ctx.from.id} requested help`);
      
      const helpMessage = `üìñ **–î–æ–≤—ñ–¥–∫–∞ AI Translator Bot**

üé§ **–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ Speech-to-Text: –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –∑ –∞—É–¥—ñ–æ
‚Ä¢ –ü–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É –º—ñ–∂ –º–æ–≤–∞–º–∏
‚Ä¢ –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —è–∫–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–µ—Ä–µ–∫–ª–∞–¥
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É

üîß **–ö–æ–º–∞–Ω–¥–∏:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
/menu - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤
/limits - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
/stats - –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

üåç **–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –º–æ–≤–∏:**
üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
üá∫üá∏ English  
üá¨üá™ ·É•·Éê·É†·Éó·É£·Éö·Éò
üáÆüá© Bahasa Indonesia
üá∑üá∫ –†—É—Å—Å–∫–∏–π

üìù **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –¥–≤—ñ –º–æ–≤–∏ –≤ /settings
2. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—é –∑ —Ü–∏—Ö –º–æ–≤
3. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –º–æ–≤—É —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–µ –Ω–∞ —ñ–Ω—à—É
4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É Switch –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤

‚ùì –ü–∏—Ç–∞–Ω–Ω—è? –ù–∞–ø–∏—à—ñ—Ç—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É.`;

      await ctx.reply(helpMessage, {
        parse_mode: 'Markdown'
      });
    } catch (error) {
      logger.error('Error in handleHelp:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –¥–æ–≤—ñ–¥–∫–∏.');
    }
  }

  /**
   * Handle unknown text messages
   */
  async handleUnknownText(ctx) {
    try {
      const message = `üé§ –ù–∞–¥—ñ—à–ª—ñ—Ç—å **–≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è** –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.

–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help
–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤: /settings`;

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                callback_data: 'open_settings'
              },
              {
                text: 'üìñ –î–æ–≤—ñ–¥–∫–∞',
                callback_data: 'show_help'
              }
            ]
          ]
        }
      });
    } catch (error) {
      logger.error('Error in handleUnknownText:', error);
    }
  }

  /**
   * Handle /go_premium command (development only)
   */
  async handleGoPremium(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`DEV: User ${userId} requested premium upgrade`);
      
      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // Set premium subscription
      user.subscription.type = 'premium';
      user.subscription.expiresAt = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000); // 1 year
      await user.save();

      await ctx.reply('üéâ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º —Å—Ç–∞—Ç—É—Å! üëë\n\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏\n‚úÖ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥\n‚úÖ x10 –±—ñ–ª—å—à–µ –ª—ñ–º—ñ—Ç—ñ–≤');
    } catch (error) {
      logger.error('Error in handleGoPremium:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.');
    }
  }

  /**
   * Handle /go_free command (development only)
   */
  async handleGoFree(ctx) {
    try {
      const userId = ctx.from.id;
      logger.info(`DEV: User ${userId} requested free downgrade`);
      
      const user = await databaseService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // Set free subscription
      user.subscription.type = 'free';
      user.subscription.expiresAt = null;
      await user.save();

      await ctx.reply('üÜì –í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ç–∞—Ä–∏—Ñ.\n\n‚ö†Ô∏è –ü—Ä–µ–º—ñ—É–º —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏\n‚Ä¢ –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥\n‚Ä¢ –ó–±—ñ–ª—å—à–µ–Ω—ñ –ª—ñ–º—ñ—Ç–∏');
    } catch (error) {
      logger.error('Error in handleGoFree:', error);
      await ctx.reply('‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.');
    }
  }
}

module.exports = new CommandHandlers(); 